;;
;; Static evaluation of expression
;;
;; syntax typedExpressionIR =
;;   expressionIR `# `( typeIR ctk )
;;

;;; syntax expressionIR

;;;; literalExpressionIR
;;;; syntax literalExpression

;;;;; TRUE
;;;;; FALSE

rule Eval_static/literalExpressionIR-true:
  p TC |- TRUE `# `( _ _ ) ~> B true

rule Eval_static/literalExpressionIR-false:
  p TC |- FALSE `# `( _ _ ) ~> B false

;;;;; number

rule Eval_static/literalExpressionIR-number-arbint:
  p TC |- (D i) `# `( _ _ ) ~> D i

rule Eval_static/literalExpressionIR-number-fixbit:
  p TC |- (n W i) `# `( _ _ ) ~> n W i

rule Eval_static/literalExpressionIR-number-fixint:
  p TC |- (n S i) `# `( _ _ ) ~> n S i

;;;;; stringLiteral 

rule Eval_static/literalExpressionIR-stringliteral:
  p TC |- (`" text `") `# `( _ _ ) ~> `" text `"

;;;; referenceExpressionIR
;;;; syntax referenceExpressionIR = prefixedNameIR

rule Eval_static/referenceExpression:
  p TC |- prefixedNameIR `# `( _ _ ) ~> value
  -- if value = $find_value(p, TC, prefixedNameIR)

;;;; defaultExpressionIR
;;;; syntax defaultExpressionIR = defaultExpression

rule Eval_static/defaultExpressionIR:
  p TC |- `... `# `( _ _ ) ~> DEFAULT

;;;; unaryExpressionIR
;;;; syntax unaryExpressionIR = unop typedExpressionIR

rule Eval_static/unaryExpressionIR-bnot:
  p TC |- (`~ typedExpressionIR) `# `( _ _ ) ~> $un_bnot(value)
  -- Eval_static: p TC |- typedExpressionIR ~> value

rule Eval_static/unaryExpressionIR-lnot:
  p TC |- (`! typedExpressionIR) `# `( _ _ ) ~> $un_lnot(value)
  -- Eval_static: p TC |- typedExpressionIR ~> value

rule Eval_static/unaryExpressionIR-plus:
  p TC |- (`+ typedExpressionIR) `# `( _ _ ) ~> $un_plus(value)
  -- Eval_static: p TC |- typedExpressionIR ~> value

rule Eval_static/unaryExpressionIR-minus:
  p TC |- (`- typedExpressionIR) `# `( _ _ ) ~> $un_minus(value)
  -- Eval_static: p TC |- typedExpressionIR ~> value

;;;; binaryExpressionIR
;;;; syntax binaryExpressionIR =
;;;;  typedExpressionIR binop typedExpressionIR

rule Eval_static/binaryExpressionIR-plus:
  p TC |- (typedExpressionIR_l `+ typedExpressionIR_r) `# `( _ _ )
       ~> $bin_plus(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-satplus:
  p TC |- (typedExpressionIR_l `|+| typedExpressionIR_r) `# `( _ _ )
       ~> $bin_satplus(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-minus:
  p TC |- (typedExpressionIR_l `- typedExpressionIR_r) `# `( _ _ )
       ~> $bin_minus(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-satminus:
  p TC |- (typedExpressionIR_l `|-| typedExpressionIR_r) `# `( _ _ )
       ~> $bin_satminus(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-mul:
  p TC |- (typedExpressionIR_l `* typedExpressionIR_r) `# `( _ _ )
       ~> $bin_mul(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-div:
  p TC |- (typedExpressionIR_l `/ typedExpressionIR_r) `# `( _ _ )
       ~> $bin_div(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-shl:
  p TC |- (typedExpressionIR_l `<< typedExpressionIR_r) `# `( _ _ )
       ~> $bin_shl(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-shr:
  p TC |- (typedExpressionIR_l `>> typedExpressionIR_r) `# `( _ _ )
       ~> $bin_shr(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-le:
  p TC |- (typedExpressionIR_l `<= typedExpressionIR_r) `# `( _ _ )
       ~> (B $bin_le(value_l, value_r))
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-ge:
  p TC |- (typedExpressionIR_l `>= typedExpressionIR_r) `# `( _ _ )
       ~> (B $bin_ge(value_l, value_r))
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-lt:
  p TC |- (typedExpressionIR_l ``< typedExpressionIR_r) `# `( _ _ )
       ~> (B $bin_lt(value_l, value_r))
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-gt:
  p TC |- (typedExpressionIR_l ``> typedExpressionIR_r) `# `( _ _ )
       ~> (B $bin_gt(value_l, value_r))
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-eq:
  p TC |- (typedExpressionIR_l `== typedExpressionIR_r) `# `( _ _ )
       ~> (B $bin_eq(value_l, value_r))
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-ne:
  p TC |- (typedExpressionIR_l `!= typedExpressionIR_r) `# `( _ _ )
       ~> (B $bin_ne(value_l, value_r))
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-band:
  p TC |- (typedExpressionIR_l `& typedExpressionIR_r) `# `( _ _ )
       ~> $bin_band(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-bxor:
  p TC |- (typedExpressionIR_l `^ typedExpressionIR_r) `# `( _ _ )
       ~> $bin_bxor(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-bor:
  p TC |- (typedExpressionIR_l `| typedExpressionIR_r) `# `( _ _ )
       ~> $bin_bor(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-concat:
  p TC |- (typedExpressionIR_l `++ typedExpressionIR_r) `# `( _ _ )
       ~> $bin_concat(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-land:
  p TC |- (typedExpressionIR_l `&& typedExpressionIR_r) `# `( _ _ )
       ~> $bin_land(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

rule Eval_static/binaryExpressionIR-lor:
  p TC |- (typedExpressionIR_l `|| typedExpressionIR_r) `# `( _ _ )
       ~> $bin_lor(value_l, value_r)
  -- Eval_static: p TC |- typedExpressionIR_l ~> value_l
  -- Eval_static: p TC |- typedExpressionIR_r ~> value_r

;;;; ternaryExpressionIR
;;;; syntax ternaryExpressionIR =
;;;;   typedExpressionIR `? typedExpressionIR `: typedExpressionIR

rule Eval_static/ternaryExpressionIR-true:
  p TC |- (typedExpressionIR_cond `? typedExpressionIR_true `: typedExpressionIR_false)
          `# `( _ _ )
       ~> value_true
  -- Eval_static: p TC |- typedExpressionIR_cond ~> (B true)
  -- Eval_static: p TC |- typedExpressionIR_true ~> value_true

rule Eval_static/ternaryExpressionIR-false:
  p TC |- (typedExpressionIR_cond `? typedExpressionIR_true `: typedExpressionIR_false)
          `# `( _ _ )
       ~> value_false
  -- Eval_static: p TC |- typedExpressionIR_cond ~> (B false)
  -- Eval_static: p TC |- typedExpressionIR_false ~> value_false

;;;; castExpressionIR
;;;; syntax castExpressionIR = `( typeIR ) typedExpressionIR

rule Eval_static/castExpression:
  p TC |- (`( typeIR ) typedExpressionIR) `# `( _ _ ) ~> value_cast
  -- Eval_static: p TC |- typedExpressionIR ~> value
  -- if value_cast = $cast_op(typeIR, value)

;;;; dataExpressionIR
;;;; syntax dataExpressionIR

;;;;; `{#}

rule Eval_static/dataExpressionIR-invalid:
  p TC |- `{#} `# `( _ _ ) ~> `{#}

;;;;; SEQ `{ typedExpressionListIR }

rule Eval_static/dataExpressionIR-sequence:
  p TC |- (SEQ `{ typedExpressionIR* }) `# `( _ _ ) ~> SEQ `( value* )
  -- (Eval_static: p TC |- typedExpressionIR ~> value)*

;;;;; SEQ `{ typedExpressionListIR `, `... }

rule Eval_static/dataExpressionIR-sequence-default:
  p TC |- (SEQ `{ typedExpressionIR* `, `... }) `# `( _ _ ) ~> SEQ `( value* `, `... )
  -- (Eval_static: p TC |- typedExpressionIR ~> value)*

;;;;; RECORD `{ namedExpressionListIR }

rule Eval_static/dataExpressionIR-record:
  p TC |- (RECORD `{ (nameIR `= typedExpressionIR)* }) `# `( _ _ )
      ~> RECORD `{ (value nameIR `;)* }
  -- (Eval_static: p TC |- typedExpressionIR ~> value)*

;;;;; RECORD `{ namedExpressionListIR `, `... }

rule Eval_static/dataExpressionIR-record-default:
  p TC |- (RECORD `{ (nameIR `= typedExpressionIR)* `, `... }) `# `( _ _ )
      ~> RECORD `{ (value nameIR `;)* `, `... }
  -- (Eval_static: p TC |- typedExpressionIR ~> value)*

;;;; accessExpressionIR
;;;; syntax accessExpressionIR =

;;;;; errorAccessExpressionIR
;;;;; syntax errorAccessExpressionIR = ERROR `. nameIR

rule Eval_static/errorAccessExpressionIR:
  p TC |- (ERROR `. nameIR) `# `( _ _ ) ~> value_error
  -- if nameIR_error = "error." ++ nameIR
  -- if value_error = $find_value(p, TC, `` nameIR_error)

;;;;; memberAccessExpressionIR
;;;;; syntax memberAccessExpressionIR = memberAccessBaseIR `. nameIR
;;;;;; syntax memberAccessBaseIR

;;;;;;; TYPE prefixedNameIR

rule Eval_static/memberAccessExpressionIR-prefixedNameIR-enum:
  p TC |- ((TYPE prefixedNameIR) `. nameIR) `# `( typeIR_base _ )
       ~> tid `. nameIR
  -- if ENUM tid `{ id_member* } = $find_type(p, TC, prefixedNameIR)
  -- if nameIR <- id_member*

rule Eval_static/memberAccessExpressionIR-prefixedNameIR-serenum:
  p TC |- ((TYPE prefixedNameIR) `. nameIR) `# `( typeIR_base _ )
       ~> tid `. nameIR `# value
  -- if ENUM tid `# typeIR `{ (id_member `= value_member `;)* }
      = $find_type(p, TC, prefixedNameIR)
  -- if value
      = $assoc_<id, value>(nameIR, (id_member, value_member)*)

;;;;;;; typedExpressionIR
;;;;;;; general member accesses are not evaluated statically

rule Eval_static/memberAccessExpressionIR-typedExpressionIR-stack-size:
  p TC |- (typedExpressionIR_base `. "size") `# `( typeIR_base _ )
       ~> D n_size
  -- if _ `[ n_size ] = typeIR_base

rule Eval_static/memberAccessExpressionIR-typedExpressionIR-struct:
  p TC |- (typedExpressionIR_base `. nameIR) `# `( typeIR_base _ )
       ~> value
  -- Eval_static: p TC |- typedExpressionIR_base ~> value_base
  -- if STRUCT _ `{ (value_field id_field `;)* } = value_base
  -- if value = $assoc_<id, value>(nameIR, (id_field, value_field)*)

rule Eval_static/memberAccessExpressionIR-typedExpressionIR-header:
  p TC |- (typedExpressionIR_base `. nameIR) `# `( typeIR_base _ )
       ~> value
  -- Eval_static: p TC |- typedExpressionIR_base ~> value_base
  -- if HEADER _ `{ _ (value_field id_field `;)* } = value_base
  -- if value = $assoc_<id, value>(nameIR, (id_field, value_field)*)

;; local compile-time known header unions do not seem to be constructable
rule Eval_static/memberAccessExpressionIR-typedExpressionIR-headerunion:
  p TC |- (typedExpressionIR_base `. nameIR) `# `( typeIR_base _ )
       ~> value
  -- Eval_static: p TC |- typedExpressionIR_base ~> value_base
  -- if HEADER_UNION _ `{ (value_field id_field `;)* } = value_base
  -- if value = $assoc_<id, value>(nameIR, (id_field, value_field)*)

;;;;; indexAccessExpressionIR
;;;;; syntax indexAccessExpressionIR

;;;;;; typedExpressionIR `[ typedExpressionIR ]

rule Eval_static/indexAccessExpressionIR-tuple:
  p TC |- (typedExpressionIR_base `[ typedExpressionIR_index ]) `# `( _ _ )
       ~> value
  -- Eval_static: p TC |- typedExpressionIR_base ~> value_base
  -- Eval_static: p TC |- typedExpressionIR_index ~> value_index
  -- if `( value_e* ) = value_base
  -- if n_index = $to_number(value_index)
  -- if $(n_index < |value_e*|)
  -- if value = value_e*[n_index]

rule Eval_static/indexAccessExpressionIR-stack:
  p TC |- (typedExpressionIR_base `[ typedExpressionIR_index ]) `# `( _ _ )
       ~> value
  -- Eval_static: p TC |- typedExpressionIR_base ~> value_base
  -- Eval_static: p TC |- typedExpressionIR_index ~> value_index
  -- if `[ value_e* `# `( _; _ ) ] = value_base
  -- if n_index = $to_number(value_index)
  -- if $(n_index < |value_e*|)
  -- if value = value_e*[n_index]

;;;;;; typedExpressionIR `[ typedExpressionIR `: typedExpressionIR ]

rule Eval_static/indexAccessExpressionIR-bitslice:
  p TC |- (typedExpressionIR_base `[ typedExpressionIR_hi `: typedExpressionIR_lo ])
          `# `( _ _ )
      ~> $bitacc_op(value_base, value_hi, value_lo)
  -- Eval_static: p TC |- typedExpressionIR_base ~> value_base
  -- Eval_static: p TC |- typedExpressionIR_hi ~> value_hi
  -- Eval_static: p TC |- typedExpressionIR_lo ~> value_lo

;;;; callExpressionIR
;;;; syntax callExpressionIR

;;;;; constructorTargetIR `( argumentListIR )
;;;;; constructor calls are not evaluated statically

;;;;; routineTargetIR `< typeArgumentListIR > `( argumentListIR )
;;;;;; syntax routineTargetIR

;;;;;;; referenceExpressionIR
;;;;;;; function/action calls are not evaluated statically

;;;;;;; typedLvalueIR `. nameIR

rule Eval_static/callExpressionIR-typedLvalueIR-size:
  p TC |- ((typedExpressionIR_base `. nameIR) `< eps > `( eps )) `# `( _ _ )
      ~> $sizeof(typeIR_base, nameIR)
  -- if _ `# `( typeIR_base _ ) = typedExpressionIR_base
  -- if nameIR <- [ "minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes" ]

;;;;;;; TYPE prefixedNameIR `. nameIR

rule Eval_static/callExpressionIR-type-size-mono:
  p TC |- ((TYPE prefixedNameIR `. nameIR) `< eps > `( eps )) `# `( _ _ )
      ~> $sizeof(typeIR_base, nameIR)
  -- if typeIR_base = $find_type(p, TC, prefixedNameIR)
  -- if nameIR <- [ "minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes" ]

rule Eval_static/callExpressionIR-type-size-poly:
  p TC |- ((TYPE prefixedNameIR `. nameIR) `< eps > `( eps )) `# `( _ _ )
      ~> $sizeof(typeIR_base, nameIR)
  -- if typeIR_base `< eps `, eps > = $find_type(p, TC, prefixedNameIR)
  -- if nameIR <- [ "minSizeInBits", "minSizeInBytes", "maxSizeInBits", "maxSizeInBytes" ]

;;;;;;; `( routineTargetIR )

rule Eval_static/callExpressionIR-parenthesized:
  p TC |- ((`( routineTargetIR )) `< typeArgumentIR* > `( argumentIR* ))
          `# `( typeIR ctk )
        ~> value
  -- Eval_static:
      p TC |- (routineTargetIR `< typeArgumentIR* > `( argumentIR* ))
              `# `( typeIR ctk )
            ~> value

;;;; parenthesizedExpressionIR
;;;; syntax parenthesizedExpressionIR = `( typedExpressionIR )

rule Eval_static/parenthesizedExpressionIR:
  p TC |- (`( typedExpressionIR )) `# `( _ _ ) ~> value
  -- Eval_static: p TC |- typedExpressionIR ~> value
