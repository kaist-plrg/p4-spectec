;;
;; Environments
;;

dec $empty_theta() : theta
def $empty_theta() = $empty_map<tid, typeIR>()

;; Map from variable identifiers to values
syntax venv = map<id, value>

dec $empty_venv() : venv
def $empty_venv() = $empty_map<id, value>

;; Dynamic representation of a parser state
syntax stateDyn = parserBlockStatementIR

;; Map from parser state names to parser states
syntax senv = map<nameIR, stateDyn>

dec $empty_senv() : senv
def $empty_senv() = $empty_map<nameIR, stateDyn>

;;
;; L-values
;;

syntax lvalueDyn =
  | referenceExpressionIR
  | lvalueDyn `. nameIR
  | lvalueDyn `[ value ]
  | lvalueDyn `[ value `: value ]

;;
;; Routines
;;

syntax renv ;; Forward declaration

syntax funcDyn =
  | BUILTIN_FUNCTION `< typeParameterListIR > `( parameterListIR ) `{ blockElementStatementListIR } ;; ??
  | FUNCTION `< typeParameterListIR > `( parameterListIR ) blockStatementIR
  | ACTION  `( parameterListIR ) `{ blockStatementIR }
  | EXTERN_FUNCTION `< typeParameterListIR > `( parameterListIR ) `{ blockElementStatementIR? }

syntax methodDyn =
  | BUILTIN_METHOD `( parameterListIR ) `# lvalueDyn 
  | EXTERN_METHOD `< typeParameterListIR > `( parameterListIR ) blockStatementIR?
  | EXTERN_METHOD ABSTRACT `< typeParameterListIR > `( parameterListIR )
  | PARSER_APPLY `( parameterListIR ) `{ parserLocalDeclarationListIR `; senv }
  | CONTROL_APPLY `( parameterListIR ) `{ controlLocalDeclarationListIR `; renv `; blockElementStatementListIR }
  | TABLE_APPLY `{ tablePropertyListIR }

syntax routineDyn = 
  | funcDyn
  | methodDyn

;; Map from routine identifiers to routines
syntax renv = map<rid, routineDyn>

dec $empty_renv() : renv
def $empty_renv() = $empty_map<rid, routineDyn>

;;
;; Constructors
;;

syntax consDyn =
  | EXTERN nameIR `< typeParameterListIR > `( constructorParameterListIR ) `{ methodPrototypeListIR }
  | PARSER `< typeParameterListIR > `( parameterListIR ) `( constructorParameterListIR ) `{ parserLocalDeclarationListIR parserStateListIR }
  | CONTROL `< typeParameterListIR > `( parameterListIR ) `( constructorParameterListIR ) `{ controlLocalDeclarationListIR APPLY controlBodyIR }
  | PACKAGE `< typeParameterListIR > `( constructorParameterListIR )
  | TABLE nameIR `{ tablePropertyListIR }

;; Map from constructor identifiers to constructors
syntax cenv = map<cid, consDyn>

dec $empty_cenv() : cenv
def $empty_cenv() = $empty_map<cid, consDyn>

;;
;; Objects
;;

syntax objDyn =
  | EXTERN `{ tid theta venv renv }
  | PARSER `{ venv parameterListIR parserLocalDeclarationListIR senv }
  | CONTROL `{ venv parameterListIR controlLocalDeclarationListIR renv controlBodyIR }
  | PACKAGE `{ theta venv }
  | TABLE `{ tid venv tablePropertyListIR }

;; Map from object identifiers to objects
syntax sto = map<oid, objDyn>

dec $empty_sto() : sto

def $empty_sto() = $empty_map<oid, objDyn>

dec $add_sto(sto, oid, objDyn) : sto

def $add_sto(sto, oid, objDyn) = 
    $add_map<oid, objDyn>(sto, oid, objDyn)
