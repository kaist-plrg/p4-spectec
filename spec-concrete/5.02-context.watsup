;;
;; Cursor
;;

syntax cursor = GLOBAL | BLOCK | LOCAL

var p : cursor

;;
;; Layered context
;;

;; Global layer

syntax globalTypingLayer =
  { CDENV cdenv,
    TDENV tdenv,
    RDENV rdenv,
    FRAME frame }

;; Block layer

syntax blockKind =
  | `EMPTY
  | EXTERN
  | PARSER
  | CONTROL
  | PACKAGE

dec $is_extern_blockKind(blockKind) : bool
def $is_extern_blockKind(blockKind) = blockKind = EXTERN

dec $is_parser_blockKind(blockKind) : bool
def $is_parser_blockKind(blockKind) = blockKind = PARSER

dec $is_control_blockKind(blockKind) : bool
def $is_control_blockKind(blockKind) = blockKind = CONTROL

dec $is_package_blockKind(blockKind) : bool
def $is_package_blockKind(blockKind) = blockKind = PACKAGE

syntax blockTypingLayer =
  { ID id,
    KIND blockKind,
    TDENV tdenv,
    RDENV rdenv,
    FRAME frame }

;; Local layer

syntax localKind =
  | `EMPTY
  | FUNCTION `-> typeIR
  | EXTERN_FUNCTION `-> typeIR
  | ACTION
  | EXTERN_METHOD `-> typeIR
  | EXTERN_METHOD ABSTRACT `-> typeIR
  | PARSER_STATE
  | CONTROL_APPLY_METHOD
  | TABLE_APPLY_METHOD

dec $is_function_localKind(localKind) : bool
def $is_function_localKind(FUNCTION `-> _) = true
def $is_function_localKind(_) = false
  -- otherwise

dec $is_extern_function_localKind(localKind) : bool
def $is_extern_function_localKind(
    EXTERN_FUNCTION `-> _
  ) = true
def $is_extern_function_localKind(_) = false
  -- otherwise

dec $is_action_localKind(localKind) : bool
def $is_action_localKind(ACTION) = true
def $is_action_localKind(_) = false
  -- otherwise

dec $is_extern_method_localKind(localKind) : bool
def $is_extern_method_localKind(
    EXTERN_METHOD `-> _
  ) = true
def $is_extern_method_localKind(_) = false
  -- otherwise

dec $is_extern_abstract_method_localKind(localKind) : bool
def $is_extern_abstract_method_localKind(
    EXTERN_METHOD ABSTRACT `-> _
  ) = true
def $is_extern_abstract_method_localKind(_) = false
  -- otherwise

dec $is_parser_state_localKind(localKind) : bool
def $is_parser_state_localKind(PARSER_STATE) = true
def $is_parser_state_localKind(_) = false
  -- otherwise

dec $is_control_apply_method_localKind(localKind) : bool
def $is_control_apply_method_localKind(
    CONTROL_APPLY_METHOD
  ) = true
def $is_control_apply_method_localKind(_) = false
  -- otherwise

dec $is_table_apply_method_localKind(localKind) : bool
def $is_table_apply_method_localKind(
    TABLE_APPLY_METHOD
  ) = true
def $is_table_apply_method_localKind(_) = false
  -- otherwise

syntax localTypingLayer =
  { ID id,
    KIND localKind,
    TDENV tdenv,
    FRAMES frame* }

;;
;; Typing context
;;

syntax typingContext =
  { GLOBAL globalTypingLayer,
    BLOCK blockTypingLayer,
    LOCAL localTypingLayer }

var TC : typingContext

;;
;; Constructor
;;

dec $empty_typingContext : typingContext

def $empty_typingContext = TC
  -- if globalTypingLayer
      = { CDENV $empty_cdenv,
          TDENV $empty_tdenv,
          RDENV $empty_rdenv,
          FRAME $empty_frame }
  -- if blockTypingLayer
      = { ID "",
          KIND `EMPTY,
          TDENV $empty_tdenv,
          RDENV $empty_rdenv,
          FRAME $empty_frame }
  -- if localTypingLayer
      = { ID "",
          KIND `EMPTY,
          TDENV $empty_tdenv,
          FRAMES ([ $empty_frame ]) }
  -- if TC
      = { GLOBAL globalTypingLayer,
          BLOCK blockTypingLayer,
          LOCAL localTypingLayer }

;;
;; Bound type variabls
;;

dec $bound(cursor, typingContext) : bound

def $bound(GLOBAL, TC) = `{ eps }
def $bound(BLOCK, TC) = $dom_map<tid, typeDefIR>(TC.BLOCK.TDENV)
def $bound(LOCAL, TC) = $union_set<tid>(bound_block, bound_local)
  -- if bound_block = $bound(BLOCK, TC)
  -- if bound_local = $dom_map<tid, typeDefIR>(TC.LOCAL.TDENV)

;;
;; Frame entry and exit
;;

dec $enter(typingContext) : typingContext

def $enter(TC) = TC [ .LOCAL.FRAMES = $empty_frame :: TC.LOCAL.FRAMES ]

dec $exit(typingContext) : typingContext

def $exit(TC) = TC [ .LOCAL.FRAMES = frame_t* ]
  -- if frame_h :: frame_t* = TC.LOCAL.FRAMES

;;
;; Adders
;;

;;; Adder for variables

dec $add_var(cursor, typingContext, id, varTypeIR) : typingContext
dec $add_vars(cursor, typingContext, id*, varTypeIR*) : typingContext

def $add_var(GLOBAL, TC, id, varTypeIR) = TC'
  -- if frame = TC.GLOBAL.FRAME
  -- if ~$in_set<id>(id, $dom_map<id, varTypeIR>(frame))
  -- if _ typeIR _ _ = varTypeIR
  -- if (id = "main") => $is_package_object_typeIR($canon(typeIR))
  -- if frame_update = $add_map<id, varTypeIR>(frame, id, varTypeIR)
  -- if TC' = TC [ .GLOBAL.FRAME = frame_update ]
def $add_var(BLOCK, TC, id, varTypeIR) = TC'
  -- if frame = TC.BLOCK.FRAME
  -- if ~$in_set<id>(id, $dom_map<id, varTypeIR>(frame))
  -- if id =/= "main"
  -- if frame_update = $add_map<id, varTypeIR>(TC.BLOCK.FRAME, id, varTypeIR)
  -- if TC' = TC [ .BLOCK.FRAME = frame_update ]
def $add_var(LOCAL, TC, id, varTypeIR) = TC'
  -- if frame_h :: frame_t* = TC.LOCAL.FRAMES
  -- if ~$in_set<id>(id, $dom_map<id, varTypeIR>(frame_h))
  -- if id =/= "main"
  -- if frame_h_update = $add_map<id, varTypeIR>(frame_h, id, varTypeIR)
  -- if frame* = frame_h_update :: frame_t*
  -- if TC' = TC [ .LOCAL.FRAMES = frame* ]

def $add_vars(p, TC, eps, eps) = TC
def $add_vars(p, TC, id_h :: id_t*, varTypeIR_h :: varTypeIR_t*) = TC''
  -- if TC' = $add_var(p, TC, id_h, varTypeIR_h)
  -- if TC'' = $add_vars(p, TC', id_t*, varTypeIR_t*)

;;; Adder for parameters

dec $add_parameter(cursor, typingContext, parameterTypeIR) : typingContext
dec $add_parameters(cursor, typingContext, parameterTypeIR*) : typingContext

def $add_parameter(cursor, TC, `EMPTY typeIR id value?) = TC'
  -- if varTypeIR = `EMPTY typeIR CTK value?
  -- if TC' = $add_var(cursor, TC, id, varTypeIR)
def $add_parameter(cursor, TC, direction typeIR id value?) = TC'
  -- if direction = IN \/ direction = OUT \/ direction = INOUT
  -- if varTypeIR = direction typeIR DYN value?
  -- if TC' = $add_var(cursor, TC, id, varTypeIR)

def $add_parameters(cursor, TC, eps) = TC
def $add_parameters(cursor, TC, parameterTypeIR_h :: parameterTypeIR_t*) = TC''
  -- if TC' = $add_parameter(cursor, TC, parameterTypeIR_h)
  -- if TC'' = $add_parameters(cursor, TC', parameterTypeIR_t*)

;;; Adder for constructor parameters

dec $add_constructorParameter(typingContext, parameterTypeIR) : typingContext
dec $add_constructorParameters(typingContext, parameterTypeIR*) : typingContext

def $add_constructorParameter(TC, direction typeIR id eps) = TC'
  -- if varTypeIR = direction typeIR CTK eps
  -- if TC' = $add_var(BLOCK, TC, id, varTypeIR)
def $add_constructorParameter(TC, direction typeIR id value) = TC'
  -- if varTypeIR = direction typeIR CTK value
  -- if TC' = $add_var(BLOCK, TC, id, varTypeIR)

def $add_constructorParameters(TC, eps) = TC
def $add_constructorParameters(TC, parameterTypeIR_h :: parameterTypeIR_t*) = TC''
  -- if TC' = $add_constructorParameter(TC, parameterTypeIR_h)
  -- if TC'' = $add_constructorParameters(TC', parameterTypeIR_t*)

;;; Adder for types

dec $add_type(cursor, typingContext, tid, typeDefIR) : typingContext
def $add_type(GLOBAL, TC, tid, typeDefIR) = TC'
  -- if tdenv = TC.GLOBAL.TDENV
  -- if ~$in_set<tid>(tid, $dom_map<tid, typeDefIR>(tdenv))
  -- if tdenv_update
      = $add_map<tid, typeDefIR>(tdenv, tid, typeDefIR)
  -- if TC' = TC [ .GLOBAL.TDENV = tdenv_update ]
def $add_type(BLOCK, TC, tid, typeDefIR) = TC'
  -- if tdenv = TC.BLOCK.TDENV
  -- if ~$in_set<tid>(tid, $dom_map<tid, typeDefIR>(tdenv))
  -- if tdenv_update
      = $add_map<tid, typeDefIR>(tdenv, tid, typeDefIR)
  -- if TC' = TC [ .BLOCK.TDENV = tdenv_update ]
def $add_type(LOCAL, TC, tid, typeDefIR) = TC'
  -- if tdenv = TC.LOCAL.TDENV
  -- if ~$in_set<tid>(tid, $dom_map<tid, typeDefIR>(tdenv))
  -- if tdenv_update
      = $add_map<tid, typeDefIR>(tdenv, tid, typeDefIR)
  -- if TC' = TC [ .LOCAL.TDENV = tdenv_update ]

dec $add_types(cursor, typingContext, tid*, typeDefIR*) : typingContext
def $add_types(p, TC, eps, eps) = TC
def $add_types(p, TC, tid_h :: tid_t*, typeDefIR_h :: typeDefIR_t*) = TC''
  -- if TC' = $add_type(p, TC, tid_h, typeDefIR_h)
  -- if TC'' = $add_types(p, TC', tid_t*, typeDefIR_t*)

;;; Adder for routines

dec $add_routine_overload(cursor, typingContext, rid, routineTypeDefIR) : typingContext

def $add_routine_overload(GLOBAL, TC, rid, routineTypeDefIR) = TC'
  -- if rdenv = TC.GLOBAL.RDENV
  -- if ~$in_set<rid>(rid, $dom_map<rid, routineTypeDefIR>(rdenv))
  -- if rdenv_update
        = $add_map<rid, routineTypeDefIR>(rdenv, rid, routineTypeDefIR)
  -- if TC' = TC [ .GLOBAL.RDENV = rdenv_update ]
def $add_routine_overload(BLOCK, TC, rid, routineTypeDefIR) = TC'
  -- if rdenv = TC.BLOCK.RDENV
  -- if ~$in_set<rid>(rid, $dom_map<rid, routineTypeDefIR>(rdenv))
  -- if rdenv_update
        = $add_map<rid, routineTypeDefIR>(rdenv, rid, routineTypeDefIR)
  -- if TC' = TC [ .BLOCK.RDENV = rdenv_update ]

dec $add_routine_non_overload(cursor, typingContext, rid, routineTypeDefIR) : typingContext

def $add_routine_non_overload(GLOBAL, TC, rid, routineTypeDefIR) = TC'
  -- if rdenv = TC.GLOBAL.RDENV
  -- if id `( _ ) = rid
  -- if `{ (id_k `( _ ))* } = $dom_map<rid, routineTypeDefIR>(rdenv)
  -- if ~$in_set<id>(id, `{ id_k* })
  -- if rdenv_update
        = $add_map<rid, routineTypeDefIR>(rdenv, rid, routineTypeDefIR)
  -- if TC' = TC [ .GLOBAL.RDENV = rdenv_update ]
def $add_routine_non_overload(BLOCK, TC, rid, routineTypeDefIR) = TC'
  -- if rdenv = TC.BLOCK.RDENV
  -- if id `( _ ) = rid
  -- if `{ (id_k `( _ ))* } = $dom_map<rid, routineTypeDefIR>(rdenv)
  -- if ~$in_set<id>(id, `{ id_k* })
  -- if rdenv_update
        = $add_map<rid, routineTypeDefIR>(rdenv, rid, routineTypeDefIR)
  -- if TC' = TC [ .BLOCK.RDENV = rdenv_update ]

;;; Adder for constructors

dec $add_constructor(typingContext, cid, constructorTypeDefIR) : typingContext

def $add_constructor(TC, cid, constructorTypeDefIR) = TC'
  -- if cdenv = TC.GLOBAL.CDENV
  -- if ~$in_set<cid>(cid, $dom_map<cid, constructorTypeDefIR>(cdenv))
  -- if cdenv_update
        = $add_map<cid, constructorTypeDefIR>(cdenv, cid, constructorTypeDefIR)
  -- if TC' = TC [ .GLOBAL.CDENV = cdenv_update ]

dec $add_constructors(typingContext, cid*, constructorTypeDefIR*) : typingContext

def $add_constructors(TC, eps, eps) = TC
def $add_constructors(
    TC,
    cid_h :: cid_t*,
    constructorTypeDefIR_h :: constructorTypeDefIR_t*
  )
  = TC''
  -- if TC' = $add_constructor(TC, cid_h, constructorTypeDefIR_h)
  -- if TC'' = $add_constructors(TC', cid_t*, constructorTypeDefIR_t*)

;;; Adder for constructors from typedef declarations
dec $add_typedef_constructors(typingContext, nameIR, nameIR, typeIR*) : typingContext
dec $get_typedef_constructors(cid*, constructorTypeDefIR*, nameIR, nameIR, typeIR*)
    : (cid*, constructorTypeDefIR*)

def $add_typedef_constructors(TC, nameIR, nameIR_base, typeIR_arg*) = TC'
  -- if `{ (cid `: constructorTypeDefIR)* } = TC.GLOBAL.CDENV
  -- if (cid_typedef*, constructorTypeDefIR_typedef*)
      = $get_typedef_constructors(cid*, constructorTypeDefIR*, nameIR, nameIR_base, typeIR_arg*)
  -- if TC' = $add_constructors(TC, cid_typedef*, constructorTypeDefIR_typedef*)

def $get_typedef_constructors(eps, eps, nameIR, nameIR_base, typeIR_arg*) = (eps, eps)

def $get_typedef_constructors(
    cid_h :: cid_t*,
    constructorTypeDefIR_h :: constructorTypeDefIR_t*,
    nameIR,
    nameIR_base,
    typeIR_arg*
  )
  = (
      cid_typedef_h :: cid_typedef_t*,
      constructorTypeDefIR_typedef_h :: constructorTypeDefIR_typedef_t*
    )
  -- if id_base `( pid_base* ) = cid_h
  -- if id_base = nameIR_base
  -- if cid_typedef_h = nameIR `( pid_base* )
  -- if (constructorTypeIR_typedef_h, tid_impl*)
      = $specialize_constructorTypeDef(constructorTypeDefIR_h, typeIR_arg*)
  -- if constructorTypeDefIR_typedef_h = constructorTypeIR_typedef_h `< eps `, tid_impl* >
  -- if (cid_typedef_t*, constructorTypeDefIR_typedef_t*)
      = $get_typedef_constructors(cid_t*, constructorTypeDefIR_t*, nameIR, nameIR_base, typeIR_arg*)

def $get_typedef_constructors(
    cid_h :: cid_t*,
    constructorTypeDefIR_h :: constructorTypeDefIR_t*,
    nameIR,
    nameIR_base,
    typeIR_arg*
  )
  = $get_typedef_constructors(cid_t*, constructorTypeDefIR_t*, nameIR, nameIR_base, typeIR_arg*)
  -- if id_base `( _ ) = cid_h
  -- if id_base =/= nameIR_base

;;
;; Finders
;;

;;; Finder for variables

dec $find_var(cursor, typingContext, prefixedNameIR) : varTypeIR?

def $find_var(p, TC, `. id) = $find_map<id, varTypeIR>(frame, id)
  -- if frame = TC.GLOBAL.FRAME
def $find_var(GLOBAL, TC, `` id) = $find_map<id, varTypeIR>(frame, id)
  -- if frame = TC.GLOBAL.FRAME
def $find_var(BLOCK, TC, `` id) = varTypeIR
  -- if frame = TC.BLOCK.FRAME
  -- if varTypeIR = $find_map<id, varTypeIR>(frame, id)
def $find_var(BLOCK, TC, `` id) = $find_var(GLOBAL, TC, `` id)
  -- if frame = TC.BLOCK.FRAME
  -- if eps = $find_map<id, varTypeIR>(frame, id)
def $find_var(LOCAL, TC, `` id) = varTypeIR
  -- if frame* = TC.LOCAL.FRAMES
  -- if varTypeIR = $find_maps<id, varTypeIR>(frame*, id)
def $find_var(LOCAL, TC, `` id) = $find_var(BLOCK, TC, `` id)
  -- if frame* = TC.LOCAL.FRAMES
  -- if eps = $find_maps<id, varTypeIR>(frame*, id)

;;; Finder for values

dec $find_value(cursor, typingContext, prefixedNameIR) : value

def $find_value(p, TC, `. id) = value
  -- if frame = TC.GLOBAL.FRAME
  -- if _ _ _ value = $find_map<id, varTypeIR>(frame, id)
def $find_value(GLOBAL, TC, `` id) = value
  -- if frame = TC.GLOBAL.FRAME
  -- if _ _ _ value = $find_map<id, varTypeIR>(frame, id)
def $find_value(BLOCK, TC, `` id) = value
  -- if frame = TC.BLOCK.FRAME
  -- if _ _ _ value = $find_map<id, varTypeIR>(frame, id)
def $find_value(BLOCK, TC, `` id) = $find_value(GLOBAL, TC, `` id)
  -- if frame = TC.BLOCK.FRAME
  -- if eps = $find_map<id, varTypeIR>(frame, id)
def $find_value(LOCAL, TC, `` id) = value
  -- if frame* = TC.LOCAL.FRAMES
  -- if _ _ _ value = $find_maps<id, varTypeIR>(frame*, id)
def $find_value(LOCAL, TC, `` id) = $find_value(BLOCK, TC, `` id)
  -- if frame* = TC.LOCAL.FRAMES
  -- if eps = $find_maps<id, varTypeIR>(frame*, id)

;;; Finder for types

dec $find_type(cursor, typingContext, prefixedNameIR) : typeDefIR?

def $find_type(p, TC, `. tid)
  = $find_map<tid, typeDefIR>(tdenv, tid)
  -- if tdenv = TC.GLOBAL.TDENV
def $find_type(GLOBAL, TC, `` tid)
  = $find_map<tid, typeDefIR>(tdenv, tid)
  -- if tdenv = TC.GLOBAL.TDENV
def $find_type(BLOCK, TC, `` tid) = typeDefIR
  -- if tdenv = TC.BLOCK.TDENV
  -- if typeDefIR = $find_map<tid, typeDefIR>(tdenv, tid)
def $find_type(BLOCK, TC, `` tid) = $find_type(GLOBAL, TC, `` tid)
  -- if tdenv = TC.BLOCK.TDENV
  -- if eps = $find_map<tid, typeDefIR>(tdenv, tid)
def $find_type(LOCAL, TC, `` tid) = typeDefIR
  -- if tdenv* = TC.LOCAL.TDENV
  -- if typeDefIR = $find_maps<tid, typeDefIR>(tdenv*, tid)
def $find_type(LOCAL, TC, `` tid) = $find_type(BLOCK, TC, `` tid)
  -- if tdenv* = TC.LOCAL.TDENV
  -- if eps = $find_maps<tid, typeDefIR>(tdenv*, tid)

;;; Finder for routines

dec $ids_arguments(argumentIR*) : (id?)*
dec $id_argument(argumentIR) : id?

def $ids_arguments(argumentIR*) = ($id_argument(argumentIR))*
def $id_argument(typedExpressionIR) = eps
def $id_argument(nameIR `= _) = nameIR
def $id_argument(nameIR `= `_) = nameIR
def $id_argument(`_) = eps

dec $find_routine_overloaded(cursor, typingContext, prefixedNameIR, argumentIR*)
  : (rid, routineTypeDefIR, id*)?

def $find_routine_overloaded(GLOBAL, TC, `. id, argumentIR*)
  = $find_overloaded<routineTypeDefIR>(rdenv, id, (id_arg?)*)
  -- if rdenv = TC.GLOBAL.RDENV
  -- if (id_arg?)* = $ids_arguments(argumentIR*)
def $find_routine_overloaded(GLOBAL, TC, `` id, argumentIR*)
  = $find_overloaded<routineTypeDefIR>(rdenv, id, (id_arg?)*)
  -- if rdenv = TC.GLOBAL.RDENV
  -- if (id_arg?)* = $ids_arguments(argumentIR*)
def $find_routine_overloaded(BLOCK, TC, `` id, argumentIR*)
  = (rid, routineTypeDefIR, id_default*)
  -- if rdenv = TC.BLOCK.RDENV
  -- if (id_arg?)* = $ids_arguments(argumentIR*)
  -- if (rid, routineTypeDefIR, id_default*)
      = $find_overloaded<routineTypeDefIR>(rdenv, id, (id_arg?)*)
def $find_routine_overloaded(BLOCK, TC, `` id, argumentIR*)
  = $find_routine_overloaded(GLOBAL, TC, `` id, argumentIR*)
  -- if rdenv = TC.BLOCK.RDENV
  -- if (id_arg?)* = $ids_arguments(argumentIR*)
  -- if eps
      = $find_overloaded<routineTypeDefIR>(rdenv, id, (id_arg?)*)
def $find_routine_overloaded(LOCAL, TC, `` id, argumentIR*)
  = $find_routine_overloaded(BLOCK, TC, `` id, argumentIR*) 

dec $find_routine_non_overloaded(cursor, typingContext, prefixedNameIR)
  : routineTypeDefIR?

def $find_routine_non_overloaded(p, TC, `. id)
  = $find_non_overloaded<routineTypeDefIR>(TC.GLOBAL.RDENV, id)
def $find_routine_non_overloaded(GLOBAL, TC, `` id)
  = $find_non_overloaded<routineTypeDefIR>(TC.GLOBAL.RDENV, id)
def $find_routine_non_overloaded(BLOCK, TC, `` id) = routineTypeDefIR
  -- if routineTypeDefIR
      = $find_non_overloaded<routineTypeDefIR>(TC.BLOCK.RDENV, id)
def $find_routine_non_overloaded(BLOCK, TC, `` id)
  = $find_routine_non_overloaded(GLOBAL, TC, `` id)
  -- if eps 
      = $find_non_overloaded<routineTypeDefIR>(TC.BLOCK.RDENV, id)
def $find_routine_non_overloaded(LOCAL, TC, `` id)
  = $find_routine_non_overloaded(BLOCK, TC, `` id)

;;; Finder for constructors

dec $find_constructor_overloaded(typingContext, prefixedNameIR, argumentIR*)
  : (rid, constructorTypeDefIR, id*)?

def $find_constructor_overloaded(TC, `. id, argumentIR*)
  = $find_overloaded<constructorTypeDefIR>(cdenv, id, (id_arg?)*)
  -- if cdenv = TC.GLOBAL.CDENV
  -- if (id_arg?)* = $ids_arguments(argumentIR*)
def $find_constructor_overloaded(TC, `` id, argumentIR*)
  = $find_overloaded<constructorTypeDefIR>(cdenv, id, (id_arg?)*)
  -- if cdenv = TC.GLOBAL.CDENV
  -- if (id_arg?)* = $ids_arguments(argumentIR*)

;;; Finder for return types

dec $find_return_type(typingContext) : typeIR?

def $find_return_type(TC) = typeIR_ret
  -- if FUNCTION `-> typeIR_ret = TC.LOCAL.KIND
def $find_return_type(TC) = typeIR_ret
  -- if EXTERN_FUNCTION `-> typeIR_ret = TC.LOCAL.KIND
def $find_return_type(TC) = VOID
  -- if ACTION = TC.LOCAL.KIND
def $find_return_type(TC) = typeIR_ret
  -- if EXTERN_METHOD `-> typeIR_ret = TC.LOCAL.KIND
def $find_return_type(TC) = typeIR_ret
  -- if EXTERN_METHOD ABSTRACT `-> typeIR_ret
      = TC.LOCAL.KIND
def $find_return_type(TC) = VOID
  -- if CONTROL_APPLY_METHOD = TC.LOCAL.KIND
def $find_return_type(TC) = eps
  -- otherwise
