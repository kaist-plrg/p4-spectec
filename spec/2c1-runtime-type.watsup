;;
;; Forward declarations of mutually recursive syntax
;;

syntax typ, polytypdef, funcdef

;;
;; Parameter Type
;;

;;
;; Forward declaration of mutually recursive syntax
;;

syntax paramtyp hint(show %latex("\\tau_\\texttt{param}")) =
  id dir typ exprIL?

var pt : paramtyp hint(show %latex("\\tau_\\texttt{param}"))

;;
;; Type
;;

;;
;; Base type: primitive or numeric type
;;

syntax primtyp hint(show %latex("\\tau_\\texttt{prim}")) =
  | VoidT         hint(show VOID#_#T)
  | ErrT          hint(show ERR#_#T)
  | MatchKindT    hint(show MATCH#_#KIND#_#T)
  | StrT          hint(show STR#_#T)
  | BoolT         hint(show BOOL#_#T)

syntax numtyp hint(show %latex("\\tau_\\texttt{num}")) =
  | IntT          hint(show INT#_#T)
  | FIntT width   hint(show FINT#_#T#%latex("\\langle")#%#%latex("\\rangle"))
  | FBitT width   hint(show FBIT#_#T#%latex("\\langle")#%#%latex("\\rangle"))
  | VBitT width   hint(show VBIT#_#T#%latex("\\langle")#%#%latex("\\rangle"))

syntax basetyp hint(show %latex("\\tau_\\texttt{base}")) =
  | primtyp | numtyp

;;
;; Abstract type
;;

syntax abstyp hint(show %latex("\\tau_\\texttt{abs}")) =
  | VarT id                         hint(show VAR#_#T %)
  | SpecT polytypdef typ*           hint(show SPEC#_#T %#%latex("\\langle")#%#%latex("\\rangle"))

;;
;; Defined type: alias or data or object type
;;

syntax aliastyp hint(show %latex("\\tau_\\texttt{alias}")) =
  | DefT id typ                        hint(show DEF#_#T %)

syntax datatyp hint(show %latex("\\tau_\\texttt{data}")) =
  | NewT id typ                     hint(show NEW#_#T % %)
  | EnumT id member*                hint(show ENUM#_#T % %latex("\\{")#%#%latex("\\}"))
  | SEnumT id typ (member, val)*    hint(show SENUM#_#T % % %latex("\\{")#%#%latex("\\}"))
  | ListT typ                       hint(show LIST#_#T %)
  | TupleT typ*                     hint(show TUPLE#_#T %)
  | StackT typ int                  hint(show STACK#_#T %#`[%])
  | StructT id (member, typ)*       hint(show STRUCT#_#T % %latex("\\{")#%#%latex("\\}"))
  | HeaderT id (member, typ)*       hint(show HEADER#_#T % %latex("\\{")#%#%latex("\\}"))
  | UnionT id (member, typ)*        hint(show UNION#_#T % %latex("\\{")#%#%latex("\\}"))

syntax objtyp hint(show %latex("\\tau_\\texttt{obj}")) =
  | ExternT id map<fid, funcdef>    hint(show EXTERN#_#T % %)
  | ParserT id paramtyp*               hint(show PARSER#_#T (%))
  | ControlT id paramtyp*              hint(show CONTROL#_#T (%))
  | PackageT id typ*                   hint(show PACKAGE#_#T %)
  | TableT id typ                   hint(show TABLE#_#T %)

syntax deftyp hint(show %latex("\\tau_\\texttt{def}")) =
  | aliastyp | datatyp | objtyp

;;
;; Synthesized type
;;

syntax synthtyp hint(show %latex("\\tau_\\texttt{synth}")) =
  | DefaultT                        hint(show DEFAULT#_#T)
  | SeqT typ*                       hint(show SEQ#_#T %)
  | SeqDefaultT typ*                hint(show SEQ#_#DEFAULT#_#T %)
  | RecordT (member, typ)*          hint(show RECORD#_#T %latex("\\{")#%#%latex("\\}"))
  | RecordDefaultT (member, typ)*   hint(show RECORD#_#DEFAULT#_#T %latex("\\{")#%#%latex("\\}"))
  | InvalidT                        hint(show INVALID#_#T)
  | SetT typ                        hint(show SET#_#T)
  | StateT                          hint(show STATE#_#T)
  | TableEnumT id member*           hint(show TABLE#_#ENUM#_#T % %latex("\\{")#%#%latex("\\}"))
  | TableStructT id (member, typ)*  hint(show TABLE#_#STRUCT#_#T % %latex("\\{")#%#%latex("\\}"))
  | AnyT                            hint(show ANY#_#T)

syntax typ hint(show %latex("\\tau")) =
  | basetyp | abstyp | deftyp | synthtyp

;;
;; Type Definition
;;

syntax monotypdef hint(show %latex("\\delta_\\texttt{monotyp}")) =
  MonoD typ
syntax polytypdef hint(show %latex("\\delta_\\texttt{polytyp}")) =
  PolyD (tparam*, tparam*) -> typ

syntax typdef hint(show %latex("\\delta_\\texttt{typ}")) =
  | monotypdef
  | polytypdef

var mtd : monotypdef    hint(show %latex("\\delta_\\texttt{monotyp}"))
var ptd : polytypdef    hint(show %latex("\\delta_\\texttt{polytyp}"))
var td : typdef         hint(show %latex("\\delta_\\texttt{typ}"))

;;
;; Function Type
;;

syntax functyp hint(show %latex("\\tau_\\texttt{f}")) =
  | ActionT paramtyp*                     hint(show ACTION#_#T (%))
  | ExternFuncT paramtyp* typ             hint(show EXTERN#_#FUNCTION#_#T (%) -> %)
  | FuncT paramtyp* typ                   hint(show FUNCTION#_#T (%) -> %)
  | BuiltinMethodT paramtyp* typ          hint(show BUILTIN#_#METHOD#_#T (%) -> %)
  | ExternMethodT paramtyp* typ           hint(show EXTERN#_#METHOD#_#T (%) -> %)
  | ExternAbstractMethodT paramtyp* typ   hint(show EXTERN#_#ABSTRACT#_#METHOD#_#T (%) -> %)
  | ParserApplyMethodT paramtyp*          hint(show PARSER#_#APPLY#_#METHOD#_#T (%))
  | ControlApplyMethodT paramtyp*         hint(show CONTROL#_#APPLY#_#METHOD#_#T (%))
  | TableApplyMethodT typ                 hint(show TABLE#_#APPLY#_#METHOD#_#T %)

var ft : functyp   hint(show %latex("\\tau_\\texttt{f}"))

;;
;; Function Definition
;;

syntax monofuncdef hint(show %latex("\\delta_\\texttt{monofunc}")) =
  MonoFD functyp                          hint(show MONO#_#FD %)

syntax polyfuncdef hint(show %latex("\\delta_\\texttt{polyfunc}")) =
  PolyFD (tparam*, tparam*) -> functyp    hint(show POLY#_#FD % % %)

syntax funcdef hint(show %latex("\\delta_\\texttt{func}")) =
  | monofuncdef
  | polyfuncdef

var mfd : monofuncdef   hint(show %latex("\\delta_\\texttt{monofunc}"))
var pfd : polyfuncdef   hint(show %latex("\\delta_\\texttt{polyfunc}"))
var fd : funcdef        hint(show %latex("\\delta_\\texttt{func}"))

var fmap : map<fid, funcdef>

;;
;; Constructor Type
;;

syntax constyp hint(show %latex("\\tau_\\texttt{cons}")) =
  ConsT paramtyp* typ  hint(show CONS#_#T (%) -> %)

var ct : constyp hint(show %latex("\\tau_\\texttt{cons}"))

;;
;; Constructor Definition
;;

syntax consdef hint(show %latex("\\delta_\\texttt{cons}")) =
  ConsD (tparam*, tparam*) -> constyp

var cd : consdef hint(show %latex("\\delta_\\texttt{cons}"))
