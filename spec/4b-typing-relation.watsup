;;
;; Annotation
;;

dec $annot(exprIL) : annotIL

def $annot(ValueE _ annotIL) = annotIL
def $annot(BoolE _ annotIL) = annotIL
def $annot(StrE _ annotIL) = annotIL
def $annot(NumE _ annotIL) = annotIL
def $annot(NameE _ annotIL) = annotIL
def $annot(SeqE _ annotIL) = annotIL
def $annot(SeqDefaultE _ annotIL) = annotIL
def $annot(RecordE _ annotIL) = annotIL
def $annot(RecordDefaultE _ annotIL) = annotIL
def $annot(DefaultE annotIL) = annotIL
def $annot(InvalidE annotIL) = annotIL
def $annot(UnE _ _ annotIL) = annotIL
def $annot(BinE _ _ _ annotIL) = annotIL
def $annot(TernE _ _ _ annotIL) = annotIL
def $annot(CastE _ _ annotIL) = annotIL
def $annot(MaskE _ _ annotIL) = annotIL
def $annot(RangeE _ _ annotIL) = annotIL
def $annot(SelectE _ _ annotIL) = annotIL
def $annot(ArrAccE _ _ annotIL) = annotIL
def $annot(BitAccE _ _ _ annotIL) = annotIL
def $annot(ErrAccE _ annotIL) = annotIL
def $annot(TypeAccE _ _ annotIL) = annotIL
def $annot(ExprAccE _ _ annotIL) = annotIL
def $annot(CallFuncE _ _ _ annotIL) = annotIL
def $annot(CallMethodE _ _ _ _ annotIL) = annotIL
def $annot(CallTypeE _ _ _ _ annotIL) = annotIL
def $annot(InstE _ _ _ _ annotIL) = annotIL

;;
;; Static evaluation
;;

;; Static evaluation of expressions that are local compile-time known
relation Eval_static:
  cursor context |- exprIL ~> valIL
  hint(input %0 %1 %2)

;;
;; Type evaluation and subtyping
;;

;; Type evaluation
relation Type_ok:
  cursor context |- type : typ tid*
  hint(input %0 %1 %2)

;; Subtyping, explicit and implicit
relation Sub_expl:
  typ <: typ
  hint(input %0 %1)
relation Sub_expl_canon:
  typ <: typ
  hint(input %0 %1)
relation Sub_expl_canon_neq:
  typ <: typ
  hint(input %0 %1)
relation Sub_impl:
  typ << typ
  hint(input %0 %1)
relation Sub_impl_canon:
  typ << typ
  hint(input %0 %1)
relation Sub_impl_canon_neq:
  typ << typ
  hint(input %0 %1)

;;
;; Expression, Statement, and Declaration typing
;;

;; Expression typing,
;; produces an IL expression (exprIL),
;; gets the type of the expression (typ),
;; and its compile-time known-ness (ctk)
relation Expr_ok:
  cursor context |- expr : exprIL
  hint(input %0 %1 %2)

;; Argument typing,
;; produces an IL argument (argIL),
relation Arg_ok:
  cursor context |- arg : argIL typ
  hint(input %0 %1 %2)

;; L-value typing
relation Lval_ok:
  cursor context |- exprIL
  hint(input %0 %1 %2)

;; Statement typing,
;; produces an IL statement (stmtIL / blockIL),
;; note that block typing depends on whether it is the initial block or not
syntax blkctxt = INIT | NOINIT
relation Block_ok:
  cursor context flow blkctxt |- block : context flow blockIL
  hint(input %0 %1 %2 %3 %4)
relation Stmt_ok:
  cursor context flow |- stmt : context flow stmtIL
  hint(input %0 %1 %2 %3)
relation Stmts_ok:
  cursor context flow |- stmt* : context flow stmtIL*
  hint(input %0 %1 %2 %3)

;; Parameter typing,
;; produces an IL parameter (paramIL),
;; inserts fresh type variables for parameters with don't care types (tid*)
relation Param_ok:
  cursor context |- param : paramIL tid*
  hint(input %0 %1 %2)
relation CParam_ok:
  cursor context |- cparam : cparamIL tid*
  hint(input %0 %1 %2)

;; Declaration typing,
;; produces an IL declaration (declIL)
relation Decl_ok:
  cursor context |- decl : context declIL
  hint(input %0 %1 %2)
relation Decls_ok:
  cursor context |- decl* : context declIL*
  hint(input %0 %1 %2)

;; Program typing,
;; produces an IL program (progIL)
relation Prog_ok:
  |- program : context programIL
  hint(input %0)

;; Copy-in/out calling convention,
;; note that it depends on whether an action is being called or not
syntax actctxt = ACT | NOACT
relation Call_convention_ok:
  cursor context actctxt |- paramtyp ~~ (exprIL, typ) : exprIL
  hint(input %0 %1 %2 %3 %4)
relation Call_convention_arg_ok:
  cursor context actctxt |- paramtyp ~~ (argIL, typ) : argIL
  hint(input %0 %1 %2 %3 %4)

;; Checks that an action/function/method invocation is valid,
;; gets the return type (typ),
;; infers the types of missing type arguments (targIL*),
;; and inserts implicit casts for arguments, if necessary (argIL*)
relation Call_site_ok:
  cursor context |- functyp : CALLSITE_OK
  hint(input %0 %1 %2)
relation Call_ok:
  cursor context tid* |- functyp targIL* arg* id* : typ targIL* argIL*
  hint(input %0 %1 %2 %3 %4 %5 %6)

;; Finds the type of a function/method, (functyp)
;; inserts fresh type variables for parameters with don't care types, (tid*)
;; and also identifies the ids of default arguments (id*) relation FuncType_ok:
relation FuncType_ok:
  cursor context |- name targIL* arg* : functyp tid* id*
  hint(input %0 %1 %2 %3 %4)
relation MethodType_ok:
  cursor context |- expr member targIL* arg* : functyp exprIL tid* id*
  hint(input %0 %1 %2 %3 %4 %5)

;; Finds the type of a constructor, (constyp)
;; inserts fresh type variables for parameters with don't care types, (tid*)
;; and also identifies the ids of default arguments (id*)
relation ConsType_ok:
  cursor context |- name targIL* arg* : constyp tid* id*
  hint(input %0 %1 %2 %3 %4)

;; Checks that a constructor invocation is valid,
;; gets the constructed object type (typ),
;; infers the types of missing type arguments (targIL*),
;; and inserts implicit casts for arguments, if necessary (argIL*)
relation Inst_site_ok:
  cursor context |- constyp : INSTSITE_OK
  hint(input %0 %1 %2)
relation Inst_ok:
  cursor context tid* |- constyp targIL* arg* id* : typ targIL* targIL* argIL*
  hint(input %0 %1 %2 %3 %4 %5 %6)
